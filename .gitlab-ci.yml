image: ubuntu

stages:
  - prepare
  - test
  - deploy
  - release

variables:
  STAT_BENCH_VERSION: "0.9.0"
  CONAN_USER: "MusicScience37"
  SECURE_LOG_LEVEL: debug
  CPP_STAT_BENCH_CONAN_REGISTRY: "https://gitlab.com/api/v4/projects/32226502/packages/conan"

include:
  - template: Security/Dependency-Scanning.gitlab-ci.yml
  - template: Jobs/SAST.gitlab-ci.yml
  - template: Security/License-Scanning.gitlab-ci.yml
dependency_scanning:
  stage: test
  needs:
    - prepare lock files
  dependencies:
    - prepare lock files
sast:
  stage: test
  needs: []
gemnasium-dependency_scanning:
  rules:
    - if: $CI_COMMIT_BRANCH
      when: on_success
license_scanning:
  stage: test
  needs:
    - prepare lock files
  dependencies:
    - prepare lock files

.retry setting:
  retry:
    max: 1
    when: runner_system_failure

sync poetry:
  extends: .retry setting
  stage: prepare
  image: musicscience37/clang-ci:clang14
  script:
    - mkdir -p .venv
    - poetry config virtualenvs.in-project true
    - poetry env use 3.10
    - poetry install
  cache:
    key:
      prefix: poetry-linux
      files:
        - poetry.lock
    paths:
      - .venv
  artifacts:
    paths:
      - .venv
    expire_in: "1 week"

prepare lock files:
  extends: .retry setting
  stage: prepare
  needs: []
  image: musicscience37/clang-ci:clang14
  script:
    - poetry config virtualenvs.in-project true
    - poetry env use 3.10
    - poetry install
    - poetry run conan profile new --detect default
    - poetry run conan profile update settings.compiler.libcxx=libc++ default
    - poetry run conan install --build missing -o cpp_stat_bench:requirements_for_tests=True -s build_type=Debug .
  cache:
    key:
      prefix: poetry-linux-prepare
      files:
        - Pipfile.lock
    paths:
      - .venv
  artifacts:
    paths:
      - conan.lock
    expire_in: "1 mos"

line count:
  extends: .retry setting
  stage: prepare
  dependencies: []
  image: registry.gitlab.com/musicscience37projects/docker/cloc-docker
  script:
    - mkdir -p line_count
    - cloc ./
      --exclude-dir=line_count
      --force-lang=C++,h
      --json --out=line_count/line_count.json
    - cloc include src
      --exclude-dir=line_count
      --force-lang=C++,h
      --json --out=line_count/src_line_count.json
  artifacts:
    paths:
      - line_count
    expire_in: "1 mos"

pre-commit:
  stage: test
  needs:
    - sync poetry
  dependencies:
    - sync poetry
  image: musicscience37/clang-ci:clang14
  script:
    - poetry run pre-commit run --all-files

spell check:
  stage: test
  needs: []
  image: node
  script:
    - npm install -g cspell
    - cspell lint
      "**/*.h"
      "**/*.cpp"
      "**/*.py"
      "**/*.cmake"
      "**/*.txt"
      "**/*.md"
      "**/*.rst"
      "**/*.puml"
      "**/*.bib"
      "**/*.yaml"
      "**/*.yml"
      "**/*.json"
      "**/*.toml"
      "**/*.sh"
      "**/*.bash"
      --exclude "**/*.approved.*"
  interruptible: true

static analysis:
  extends: .retry setting
  stage: test
  needs:
    - sync poetry
  dependencies:
    - sync poetry
  image: musicscience37/clang-ci:clang14
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  before_script:
    - apt update
    - apt install -y libstdc++-10-dev
    - pip3 install junit2html
    - mkdir build_static_analysis
    - cd build_static_analysis
    - git clone https://github.com/PSPDFKit-labs/clang-tidy-to-junit.git
    - cd ../
  script:
    - cd build_static_analysis
    - poetry run conan profile new --detect default
    - poetry run conan profile update settings.compiler.libcxx=libstdc++11 default
    - poetry run conan install --build missing -o cpp_stat_bench:requirements_for_tests=True ..
    - cd ../
    - cmake -S ./ -B build_static_analysis
      -DSTAT_BENCH_ENABLE_CLANG_TIDY:BOOL=ON
      -DSTAT_BENCH_TESTING:BOOL=ON
      -DSTAT_BENCH_ENABLE_BENCH=ON
      -DSTAT_BENCH_BUILD_EXAMPLES=ON
      -DSTAT_BENCH_ENABLE_CPP_WARNINGS:BOOL=ON
    - cmake --build build_static_analysis
      --target stat_bench_clang_tidy
    - scripts/check_clang_tidy.sh build_static_analysis/clang_tidy
  after_script:
    - cd build_static_analysis/clang_tidy
    - cat $(find $1 -name '*.txt') |
      python3 ../clang-tidy-to-junit/clang-tidy-to-junit.py $(dirname $(pwd)) > clang_tidy_junit.xml
    - python3 -m junit2htmlreport clang_tidy_junit.xml clang_tidy_junit.html
  artifacts:
    paths:
      - $BUILD_DIR/bench
      - $BUILD_DIR/junit
      - $BUILD_DIR/temp_test
    reports:
      junit:
        - build_static_analysis/clang_tidy/clang_tidy_junit.xml
    when: always
    expire_in: "3 mos"

test gcc release:
  extends: .retry setting
  needs:
    - sync poetry
  dependencies:
    - sync poetry
  parallel:
    matrix:
      - COMPILER_TYPE: ["gcc10", "gcc12"]
  image: musicscience37/gcc-ci:${COMPILER_TYPE}
  variables:
    BUILD_TYPE: Release
    BUILD_DIR: build_${COMPILER_TYPE}_release
    CONAN_LIBCXX: libstdc++11
    CXX_STANDARD: 14
  before_script:
    - mkdir $BUILD_DIR
    - cd $BUILD_DIR
    - poetry run conan profile new --detect default
    - poetry run conan profile update settings.compiler.libcxx=$CONAN_LIBCXX default
    - poetry run conan install --build missing -o cpp_stat_bench:requirements_for_tests=True -s build_type=$BUILD_TYPE ..
    - cd ../
  script:
    - cmake -S ./ -B $BUILD_DIR
      -DCMAKE_BUILD_TYPE=$BUILD_TYPE
      -DSTAT_BENCH_TESTING:BOOL=ON
      -DSTAT_BENCH_ENABLE_BENCH=ON
      -DSTAT_BENCH_TEST_BENCHMARKS=ON
      -DSTAT_BENCH_BUILD_EXAMPLES=ON
      -DSTAT_BENCH_TEST_EXAMPLES=ON
      -DSTAT_BENCH_WRITE_JUNIT:BOOL=ON
      -DCMAKE_CXX_STANDARD=$CXX_STANDARD
    - cd $BUILD_DIR
    - cmake --build .
    - ctest -V
  artifacts:
    paths:
      - $BUILD_DIR/bench
      - $BUILD_DIR/junit
      - $BUILD_DIR/temp_test
      - $BUILD_DIR/coverage
      - "*.png"
      - "*.html"
    reports:
      junit:
        - $BUILD_DIR/junit/*.xml
    when: always
    expire_in: "1 mos"

test gcc debug:
  extends: test gcc release
  parallel:
    matrix:
      - COMPILER_TYPE: ["gcc10"]
  variables:
    BUILD_TYPE: Debug
    BUILD_DIR: build_${COMPILER_TYPE}_debug
  script:
    - cmake -S ./ -B $BUILD_DIR
      -DCMAKE_BUILD_TYPE=$BUILD_TYPE
      -DSTAT_BENCH_TESTING:BOOL=ON
      -DSTAT_BENCH_BUILD_EXAMPLES=ON
      -DSTAT_BENCH_TEST_EXAMPLES=ON
      -DSTAT_BENCH_WRITE_JUNIT:BOOL=ON
    - cd $BUILD_DIR
    - cmake --build .
    - ctest -V

test clang release:
  extends: test gcc release
  parallel:
    matrix:
      - COMPILER_TYPE: ["clang14", "clang15"]
  variables:
    CONAN_LIBCXX: libc++

test clang release cpp20:
  extends: test clang release
  parallel:
    matrix:
      - COMPILER_TYPE: ["clang14"]
  variables:
    CONAN_LIBCXX: libc++
    CXX_STANDARD: 20

test clang debug:
  extends: test gcc debug
  parallel:
    matrix:
      - COMPILER_TYPE: ["clang14"]
  variables:
    CONAN_LIBCXX: libc++

clang coverage:
  extends: test clang debug
  parallel:
    matrix:
      - COMPILER_TYPE: "clang14"
  variables:
    BUILD_DIR: build_clang_coverage
  script:
    - cmake -S ./ -B $BUILD_DIR
      -DCMAKE_BUILD_TYPE=Debug
      -DSTAT_BENCH_TESTING:BOOL=ON
      -DSTAT_BENCH_WRITE_JUNIT:BOOL=ON
      "-DCMAKE_CXX_FLAGS=-fprofile-instr-generate -fcoverage-mapping"
      "-DCMAKE_MODULE_LINKER_FLAGS=-fprofile-instr-generate -fcoverage-mapping"
    - cd $BUILD_DIR
    - mkdir coverage
    - export LLVM_PROFILE_FILE=$(pwd)/coverage/coverage_%p.profraw
    - cmake --build .
    - ctest -V
    - cd ../
    - scripts/collect_llvm_coverage.sh build_clang_coverage
    - bash <(curl -s https://codecov.io/bash) || echo "Codecov did not collect coverage reports"

gcc coverage:
  extends: test gcc debug
  parallel:
    matrix:
      - COMPILER_TYPE: "gcc10"
  variables:
    BUILD_DIR: build_gcc_coverage
  script:
    - cmake -S ./ -B $BUILD_DIR
      -DCMAKE_BUILD_TYPE=Debug
      -DSTAT_BENCH_TESTING:BOOL=ON
      -DSTAT_BENCH_WRITE_JUNIT:BOOL=ON
      "-DCMAKE_CXX_FLAGS=--coverage"
      "-DCMAKE_MODULE_LINKER_FLAGS=--coverage"
    - cd $BUILD_DIR
    - cmake --build .
    - ctest -V
    - cd ../
    - scripts/collect_gcc_coverage.sh build_gcc_coverage
  coverage: '/Total:\|\s*(\d+\.?\d+?)%/'

clang-14-asan-ubsan:
  extends: test clang debug
  parallel:
    matrix:
      - COMPILER_TYPE: "clang14"
  variables:
    BUILD_DIR: build_clang_asan_ubsan
    ASAN_OPTIONS: alloc_dealloc_mismatch=0
  script:
    - cmake -S ./ -B $BUILD_DIR
      -DCMAKE_BUILD_TYPE=Debug
      -DSTAT_BENCH_TESTING:BOOL=ON
      -DSTAT_BENCH_WRITE_JUNIT:BOOL=ON
      -DCMAKE_CXX_FLAGS=-fsanitize=address,undefined
      -DCMAKE_MODULE_LINKER_FLAGS=-fsanitize=address,undefined
    - cd $BUILD_DIR
    - cmake --build .
    - ctest -V

clang-14-tsan:
  extends: test clang debug
  parallel:
    matrix:
      - COMPILER_TYPE: "clang14"
  image: musicscience37/clang-ci:clang14
  variables:
    BUILD_DIR: build_clang_tsan
  script:
    - cmake -S ./ -B $BUILD_DIR
      -DCMAKE_BUILD_TYPE=Debug
      -DSTAT_BENCH_TESTING:BOOL=ON
      -DSTAT_BENCH_WRITE_JUNIT:BOOL=ON
      -DCMAKE_CXX_FLAGS=-fsanitize=thread
      -DCMAKE_MODULE_LINKER_FLAGS=-fsanitize=thread
    - cd $BUILD_DIR
    - cmake --build .
    - ctest -V

clang-14-conan:
  extends: .retry setting
  stage: test
  needs:
    - sync poetry
  dependencies:
    - sync poetry
  image: musicscience37/clang-ci:clang14
  variables:
    CONAN_CHANNEL: "testing"
  script:
    - poetry run conan profile new --detect default
    - poetry run conan profile update settings.compiler.libcxx=libc++ default
    - poetry run conan remote add cpp-stat-bench $CPP_STAT_BENCH_CONAN_REGISTRY
    - poetry run conan create --build missing --test-folder tests/conan_package -s build_type=Debug . ${CONAN_USER}/${CONAN_CHANNEL}
    - poetry run conan create --build missing --test-folder tests/conan_package -s build_type=Release . ${CONAN_USER}/${CONAN_CHANNEL}

clang-14-conan-release:
  extends: .retry setting
  stage: deploy
  needs:
    - sync poetry
  dependencies:
    - sync poetry
  image: musicscience37/clang-ci:clang14
  variables:
    CONAN_CHANNEL: "stable"
  script:
    - poetry run conan profile new --detect default
    - poetry run conan profile update settings.compiler.libcxx=libc++ default
    - poetry run conan remote add cpp-stat-bench $CPP_STAT_BENCH_CONAN_REGISTRY
    - poetry run conan create --build missing --test-folder tests/conan_package -s build_type=Debug . ${CONAN_USER}/${CONAN_CHANNEL}
    - poetry run conan create --build missing --test-folder tests/conan_package -s build_type=Release . ${CONAN_USER}/${CONAN_CHANNEL}
    - CONAN_LOGIN_USERNAME=ci_user CONAN_PASSWORD=${CI_JOB_TOKEN} poetry run conan upload -r cpp-stat-bench cpp_stat_bench/${STAT_BENCH_VERSION}@${CONAN_USER}/${CONAN_CHANNEL} --all
  only:
    - tags

msvc-release:
  extends: test clang debug
  parallel:
    matrix:
      - COMPILER_TYPE: "msvc"
  tags:
    - shared-windows
    - windows
    - windows-1809
  stage: test
  needs: []
  dependencies: []
  variables:
    BUILD_DIR: build_msvc
    # workaround in https://github.com/python-poetry/poetry/issues/1917#issuecomment-1235998997
    PYTHON_KEYRING_BACKEND: keyring.backends.null.Keyring
  before_script:
    - Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
    - choco install cmake -y --installargs 'ADD_CMAKE_TO_PATH=System'
    - choco install python --version=3.10.8 -y
    - RefreshEnv
    - pip install poetry
    - poetry config virtualenvs.in-project true
    - poetry install
    - mkdir $BUILD_DIR
    - cd $BUILD_DIR
    - poetry run conan profile new --detect default
    - poetry run conan install --build missing -o cpp_stat_bench:requirements_for_tests=True -s build_type=Release ..
    - cd ../
  script:
    - cmake -S ./ -B $BUILD_DIR
      -DCMAKE_BUILD_TYPE=Release
      -DSTAT_BENCH_TESTING:BOOL=ON
      -DSTAT_BENCH_ENABLE_BENCH=ON
      -DSTAT_BENCH_TEST_BENCHMARKS=ON
      -DSTAT_BENCH_BUILD_EXAMPLES=ON
      -DSTAT_BENCH_TEST_EXAMPLES=ON
      -DSTAT_BENCH_WRITE_JUNIT:BOOL=ON
    - cd $BUILD_DIR
    - cmake --build . --config Release --parallel
    - ctest -V --build-config Release
  retry:
    max: 2
    when: always

doc:
  extends: .retry setting
  stage: test
  needs:
    - sync poetry
  dependencies:
    - sync poetry
  image: musicscience37/sphinx-doxygen:clang14
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    - mkdir build_doc
    - cd build_doc
    - poetry run conan profile new --detect default
    - poetry run conan profile update settings.compiler.libcxx=libc++ default
    - poetry run conan install --build missing -o cpp_stat_bench:requirements_for_tests=True ..
    - cd ../
    - cmake -S ./ -B build_doc
      -DSTAT_BENCH_BUILD_DOC:BOOL=ON
    - cmake --build build_doc --target stat_bench_doc
  artifacts:
    paths:
      - build_doc/doc
    when: always
    expire_in: "3 mos"

pages:
  extends: .retry setting
  stage: deploy
  only:
    - develop
  needs:
    - doc
  dependencies:
    - doc
  script:
    - rm -rf public
    - mv build_doc/doc/html public
  artifacts:
    paths:
      - public

release:
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  stage: release
  rules:
    - if: $CI_COMMIT_TAG =~ /^v/
  script:
    - echo "This is a release job."
  release:
    tag_name: $CI_COMMIT_TAG
    name: "$CI_COMMIT_TAG"
    description: "./doc/sphinx/src/change_log/${CI_COMMIT_TAG}.md"
