image: ubuntu

stages:
  - prepare
  - test
  - deploy
  - release

variables:
  SECURE_LOG_LEVEL: debug

include:
  - template: Security/Dependency-Scanning.gitlab-ci.yml
  - template: Jobs/SAST.gitlab-ci.yml
  - template: Security/License-Scanning.gitlab-ci.yml
dependency_scanning:
  stage: test
  needs: []
sast:
  stage: test
  needs: []
gemnasium-dependency_scanning:
  rules:
    - if: $CI_COMMIT_BRANCH
      when: on_success
license_scanning:
  stage: test
  needs: []

sync poetry:
  stage: prepare
  image: musicscience37/clang-ci:clang14
  script:
    - mkdir -p .venv
    - poetry config virtualenvs.in-project true
    - poetry env use 3.10
    - poetry install
  cache:
    key:
      prefix: poetry-linux
      files:
        - poetry.lock
    paths:
      - .venv
  artifacts:
    paths:
      - .venv
    expire_in: "1 week"

line count:
  stage: prepare
  dependencies: []
  image: registry.gitlab.com/musicscience37projects/docker/cloc-docker
  script:
    - mkdir -p line_count
    - cloc ./
      --exclude-dir=line_count
      --force-lang=C++,h
      --json --out=line_count/line_count.json
    - cloc include src
      --exclude-dir=line_count
      --force-lang=C++,h
      --json --out=line_count/src_line_count.json
  artifacts:
    paths:
      - line_count
    expire_in: "1 mos"

pre-commit:
  stage: test
  needs:
    - sync poetry
  dependencies:
    - sync poetry
  image: musicscience37/clang-ci:clang14
  script:
    - poetry run pre-commit run --all-files

spell check:
  stage: test
  needs: []
  image: node
  script:
    - npm install -g cspell
    - cspell lint
      "**/*.h"
      "**/*.cpp"
      "**/*.py"
      "**/*.cmake"
      "**/*.txt"
      "**/*.md"
      "**/*.rst"
      "**/*.puml"
      "**/*.bib"
      "**/*.yaml"
      "**/*.yml"
      "**/*.json"
      "**/*.toml"
      "**/*.sh"
      "**/*.bash"
      --exclude "**/*.approved.*"
      --exclude "vcpkg/*"
  interruptible: true

test release:
  needs:
    - sync poetry
  dependencies:
    - sync poetry
  parallel:
    matrix:
      - COMPILER_TYPE: ["gcc10", "gcc12"]
        IMAGE_PATH: "musicscience37/gcc-ci"
        CXX_STANDARD: 14
      - COMPILER_TYPE: ["clang14", "clang15"]
        IMAGE_PATH: "musicscience37/clang-ci"
        CXX_STANDARD: 14
      - COMPILER_TYPE: ["clang14"]
        IMAGE_PATH: "musicscience37/clang-ci"
        CXX_STANDARD: 20
  image: ${IMAGE_PATH}:${COMPILER_TYPE}
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    BUILD_TYPE: Release
    BUILD_DIR: build_${COMPILER_TYPE}_release
  before_script:
    - apt-get update
    - apt-get install -y --no-install-recommends curl zip unzip tar
    - ./vcpkg/bootstrap-vcpkg.sh
    - mkdir $BUILD_DIR
  script:
    - cd $BUILD_DIR
    - cmake ..
      -DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake
      -DCMAKE_BUILD_TYPE=$BUILD_TYPE
      -DSTAT_BENCH_TESTING:BOOL=ON
      -DSTAT_BENCH_ENABLE_BENCH=ON
      -DSTAT_BENCH_TEST_BENCHMARKS=ON
      -DSTAT_BENCH_BUILD_EXAMPLES=ON
      -DSTAT_BENCH_TEST_EXAMPLES=ON
      -DSTAT_BENCH_WRITE_JUNIT:BOOL=ON
      -DCMAKE_CXX_STANDARD=$CXX_STANDARD
    - cmake --build .
    - ctest -V
  artifacts:
    paths:
      - $BUILD_DIR/bench
      - $BUILD_DIR/junit
      - $BUILD_DIR/temp_test
      - $BUILD_DIR/coverage
      - "*.png"
      - "*.html"
    reports:
      junit:
        - $BUILD_DIR/junit/*.xml
    when: always
    expire_in: "1 mos"
  retry:
    max: 1
    when: always

test debug:
  extends: test release
  parallel:
    matrix:
      - COMPILER_TYPE: ["gcc10"]
        IMAGE_PATH: "musicscience37/gcc-ci"
        CXX_STANDARD: 14
      - COMPILER_TYPE: ["clang14"]
        IMAGE_PATH: "musicscience37/clang-ci"
        CXX_STANDARD: 14
  variables:
    BUILD_TYPE: Debug
    BUILD_DIR: build_${COMPILER_TYPE}_debug
  script:
    - cd $BUILD_DIR
    - cmake ..
      -DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake
      -DCMAKE_BUILD_TYPE=$BUILD_TYPE
      -DSTAT_BENCH_TESTING:BOOL=ON
      -DSTAT_BENCH_BUILD_EXAMPLES=ON
      -DSTAT_BENCH_TEST_EXAMPLES=ON
      -DSTAT_BENCH_WRITE_JUNIT:BOOL=ON
    - cmake --build .
    - ctest -V

clang coverage:
  extends: test debug
  parallel:
    matrix:
      - COMPILER_TYPE: "clang14"
        IMAGE_PATH: "musicscience37/clang-ci"
        CXX_STANDARD: 14
  variables:
    BUILD_DIR: build_clang_coverage
  script:
    - cd $BUILD_DIR
    - cmake ..
      -DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake
      -DVCPKG_TARGET_TRIPLET=x64-linux-llvm
      -DVCPKG_HOST_TRIPLET=x64-linux-llvm
      -DCMAKE_BUILD_TYPE=Debug
      -DSTAT_BENCH_TESTING:BOOL=ON
      -DSTAT_BENCH_WRITE_JUNIT:BOOL=ON
      "-DCMAKE_CXX_FLAGS=-stdlib=libc++ -fprofile-instr-generate -fcoverage-mapping"
      "-DCMAKE_MODULE_LINKER_FLAGS=-fprofile-instr-generate -fcoverage-mapping"
    - mkdir coverage
    - export LLVM_PROFILE_FILE=$(pwd)/coverage/coverage_%p.profraw
    - cmake --build .
    - ctest -V
    - cd ../
    - scripts/collect_llvm_coverage.sh build_clang_coverage
    - poetry run lcov_cobertura $BUILD_DIR/coverage/coverage --output $BUILD_DIR/coverage.xml
  coverage: '/[^\s]+%\s+\d+\s+\d+\s+\s[^\s]+%/'
  artifacts:
    paths:
      - $BUILD_DIR/bench
      - $BUILD_DIR/junit
      - $BUILD_DIR/temp_test
      - $BUILD_DIR/coverage
      - "*.png"
      - "*.html"
    reports:
      junit:
        - $BUILD_DIR/junit/*.xml
      coverage_report:
        coverage_format: cobertura
        path: $BUILD_DIR/coverage.xml
    when: always
    expire_in: "1 mos"

clang-14-asan-ubsan:
  extends: test debug
  parallel:
    matrix:
      - COMPILER_TYPE: "clang14"
        IMAGE_PATH: "musicscience37/clang-ci"
        CXX_STANDARD: 14
  variables:
    BUILD_DIR: build_clang_asan_ubsan
    ASAN_OPTIONS: alloc_dealloc_mismatch=0
  script:
    - cd $BUILD_DIR
    - cmake ..
      -DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake
      -DVCPKG_TARGET_TRIPLET=x64-linux-llvm
      -DVCPKG_HOST_TRIPLET=x64-linux-llvm
      -DCMAKE_BUILD_TYPE=Debug
      -DSTAT_BENCH_TESTING:BOOL=ON
      -DSTAT_BENCH_WRITE_JUNIT:BOOL=ON
      "-DCMAKE_CXX_FLAGS=-stdlib=libc++ -fsanitize=address,undefined"
      -DCMAKE_MODULE_LINKER_FLAGS=-fsanitize=address,undefined
    - cmake --build .
    - ctest -V

clang-14-tsan:
  extends: clang-14-asan-ubsan
  variables:
    BUILD_DIR: build_clang_tsan
  script:
    - cd $BUILD_DIR
    - cmake ..
      -DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake
      -DVCPKG_TARGET_TRIPLET=x64-linux-llvm
      -DVCPKG_HOST_TRIPLET=x64-linux-llvm
      -DCMAKE_BUILD_TYPE=Debug
      -DSTAT_BENCH_TESTING:BOOL=ON
      -DSTAT_BENCH_WRITE_JUNIT:BOOL=ON
      "-DCMAKE_CXX_FLAGS=-stdlib=libc++ -fsanitize=thread"
      -DCMAKE_MODULE_LINKER_FLAGS=-fsanitize=thread
    - cmake --build .
    - ctest -V

msvc-release:
  parallel:
    matrix:
      - COMPILER_TYPE: "msvc"
  tags:
    - shared-windows
    - windows
    - windows-1809
  stage: test
  needs: []
  dependencies: []
  variables:
    BUILD_DIR: build_msvc
    GIT_SUBMODULE_STRATEGY: recursive
    # workaround in https://github.com/python-poetry/poetry/issues/1917#issuecomment-1235998997
    PYTHON_KEYRING_BACKEND: keyring.backends.null.Keyring
  before_script:
    - Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
    - choco install cmake -y --installargs 'ADD_CMAKE_TO_PATH=System'
    - choco install python --version=3.10.8 -y
    - RefreshEnv
    # https://github.com/python-poetry/poetry/issues/7611#issuecomment-1455750699
    - pip install poetry==1.3.2
    - poetry config virtualenvs.in-project true
    - poetry install
    - .\vcpkg\bootstrap-vcpkg.bat
    - mkdir $BUILD_DIR
  script:
    - cd $BUILD_DIR
    - cmake ..
      "-DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake"
      -DCMAKE_BUILD_TYPE=Release
      -DSTAT_BENCH_TESTING:BOOL=ON
      -DSTAT_BENCH_ENABLE_BENCH=ON
      -DSTAT_BENCH_TEST_BENCHMARKS=ON
      -DSTAT_BENCH_BUILD_EXAMPLES=ON
      -DSTAT_BENCH_TEST_EXAMPLES=ON
      -DSTAT_BENCH_WRITE_JUNIT:BOOL=ON
    - cmake --build . --config Release --parallel
    - ctest -V --build-config Release
  artifacts:
    paths:
      - $BUILD_DIR/bench
      - $BUILD_DIR/junit
      - $BUILD_DIR/temp_test
      - $BUILD_DIR/coverage
      - "*.png"
      - "*.html"
    reports:
      junit:
        - $BUILD_DIR/junit/*.xml
    when: always
    expire_in: "1 mos"
  retry:
    max: 2
    when: always

static analysis:
  extends: test release
  parallel:
    matrix:
      - COMPILER_TYPE: "clang14"
        IMAGE_PATH: "musicscience37/clang-ci"
        CXX_STANDARD: 14
  variables:
    BUILD_TYPE: Debug
    BUILD_DIR: build_static_analysis
  script:
    - cd $BUILD_DIR
    - cmake ..
      -DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake
      -DVCPKG_TARGET_TRIPLET=x64-linux-llvm
      -DVCPKG_HOST_TRIPLET=x64-linux-llvm
      -DCMAKE_CXX_FLAGS=-stdlib=libc++
      -DCMAKE_C_FLAGS=-stdlib=libc++
      -DSTAT_BENCH_ENABLE_CLANG_TIDY:BOOL=ON
      -DSTAT_BENCH_TESTING:BOOL=ON
      -DSTAT_BENCH_ENABLE_BENCH=ON
      -DSTAT_BENCH_BUILD_EXAMPLES=ON
      -DSTAT_BENCH_ENABLE_CPP_WARNINGS:BOOL=ON
    - cd ..
    - poetry run clang-tidy-checker -b ${BUILD_DIR}

doc:
  stage: test
  needs:
    - sync poetry
  dependencies:
    - sync poetry
  image: musicscience37/sphinx-doxygen:clang14
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    - apt-get update
    - apt-get install -y --no-install-recommends curl zip unzip tar
    - ./vcpkg/bootstrap-vcpkg.sh
    - mkdir build_doc
    - cd build_doc
    - cmake ..
      -DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake
      -DSTAT_BENCH_BUILD_DOC:BOOL=ON
    - cmake --build . --target stat_bench_doc
  artifacts:
    paths:
      - build_doc/doc
    when: always
    expire_in: "3 mos"

pages:
  stage: deploy
  only:
    - develop
  needs:
    - doc
  dependencies:
    - doc
  script:
    - rm -rf public
    - mv build_doc/doc/html public
  artifacts:
    paths:
      - public

release:
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  stage: release
  rules:
    - if: $CI_COMMIT_TAG =~ /^v/
  script:
    - echo "This is a release job."
  release:
    tag_name: $CI_COMMIT_TAG
    name: "$CI_COMMIT_TAG"
    description: "./doc/sphinx/src/change_log/${CI_COMMIT_TAG}.md"
