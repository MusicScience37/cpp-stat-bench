image: ubuntu

stages:
  - test
  - deploy
  - release

variables:
  SECURE_LOG_LEVEL: debug

include:
  - template: Jobs/Dependency-Scanning.gitlab-ci.yml
  - template: Jobs/Secret-Detection.gitlab-ci.yml

line count:
  stage: test
  needs: []
  image: registry.gitlab.com/musicscience37projects/docker/scc-docker
  script:
    - mkdir -p line_count
    - scc
      --format-multi "tabular:stdout,html:line_count/line_count.html"
      .
    - scc
      --format-multi "openmetrics:line_count/cpp_line_count.txt"
      -i h,cpp
      .
    - scc
      --format-multi "tabular:stdout,html:line_count/src_line_count.html"
      --by-file -s complexity
      include src
  artifacts:
    paths:
      - line_count
    reports:
      metrics:
        - "line_count/cpp_line_count.txt"
    expire_in: "1 mos"
  interruptible: true

pre-commit:
  stage: test
  needs: []
  image: musicscience37/clang-ci:clang19
  variables:
    POETRY_CACHE_DIR: ${CI_PROJECT_DIR}/.poetry-cache
  script:
    - poetry config virtualenvs.in-project true
    - poetry env use 3.13
    - poetry sync --without doc
    - poetry run pre-commit run --all-files
  cache:
    - key:
        prefix: poetry-${CI_JOB_NAME}
        files:
          - poetry.lock
      paths:
        - .poetry-cache
  interruptible: true

spell check:
  stage: test
  needs: []
  image: node
  script:
    - npm install -g cspell
    - cspell lint
      "**/*.h"
      "**/*.cpp"
      "**/*.py"
      "**/*.cmake"
      "**/*.txt"
      "**/*.md"
      "**/*.rst"
      "**/*.puml"
      "**/*.bib"
      "**/*.yaml"
      "**/*.yml"
      "**/*.json"
      "**/*.toml"
      "**/*.sh"
      "**/*.bash"
      --exclude "**/*.approved.*"
      --exclude "vcpkg/*"
  interruptible: true

.test linux base:
  needs: []
  parallel:
    matrix:
      - COMPILER_TYPE: ["clang19"]
        IMAGE_PATH: "musicscience37/clang-ci"
        TEST_TYPE: "release"
  image: ${IMAGE_PATH}:${COMPILER_TYPE}
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    BUILD_DIR: build_${COMPILER_TYPE}_${TEST_TYPE}
    CCACHE_DIR: ${CI_PROJECT_DIR}/.ccache
    CCACHE_COMPILERCHECK: content
    CCACHE_MAXSIZE: 1G
    VCPKG_DEFAULT_BINARY_CACHE: ${CI_PROJECT_DIR}/.vcpkg-cache
    POETRY_CACHE_DIR: ${CI_PROJECT_DIR}/.poetry-cache
  before_script:
    - poetry config virtualenvs.in-project true
    - poetry env use 3.13
    - poetry sync --without doc
    - mkdir -p $VCPKG_DEFAULT_BINARY_CACHE
    - mkdir $BUILD_DIR
  script:
    - Dummy command for base configuration
  cache:
    - key:
        prefix: poetry-${CI_JOB_NAME}
        files:
          - poetry.lock
      paths:
        - .poetry-cache
    - key:
        prefix: vcpkg-${CI_JOB_NAME}
        files:
          - vcpkg-configuration.json
      paths:
        - .vcpkg-cache
    - key: ccache-${CI_JOB_NAME}
      paths:
        - .ccache
  artifacts:
    paths:
      - $BUILD_DIR/bench
      - $BUILD_DIR/junit
      - $BUILD_DIR/temp_test
      - $BUILD_DIR/coverage
      - "*.png"
      - "*.html"
    reports:
      junit:
        - $BUILD_DIR/junit/*.xml
    when: always
    expire_in: "1 mos"
  interruptible: true

test linux:
  extends: .test linux base
  parallel:
    matrix:
      - COMPILER_TYPE: ["gcc13"]
        IMAGE_PATH: "musicscience37/gcc-ci"
        CXX_STANDARD: 14
        TEST_TYPE: "release"
      - COMPILER_TYPE: ["clang19"]
        IMAGE_PATH: "musicscience37/clang-ci"
        CXX_STANDARD: 14
        TEST_TYPE: "release"
      - COMPILER_TYPE: ["clang19"]
        IMAGE_PATH: "musicscience37/clang-ci"
        CXX_STANDARD: 20
        TEST_TYPE: "debug"
      - COMPILER_TYPE: ["gcc13"]
        IMAGE_PATH: "musicscience37/gcc-ci"
        CXX_STANDARD: 14
        TEST_TYPE: "debug"
      - COMPILER_TYPE: ["clang19"]
        IMAGE_PATH: "musicscience37/clang-ci"
        CXX_STANDARD: 14
        TEST_TYPE: "debug"
  script:
    - poetry run python ./scripts/ci_linux_test.py
      --compiler_type $COMPILER_TYPE
      --test_type $TEST_TYPE
      --cpp_ver $CXX_STANDARD
      --build_dir $BUILD_DIR

clang coverage:
  extends: .test linux base
  parallel:
    matrix:
      - COMPILER_TYPE: "clang19"
        IMAGE_PATH: "musicscience37/clang-ci"
        TEST_TYPE: "coverage"
  variables:
    BUILD_DIR: build_clang_coverage
  script:
    - cd $BUILD_DIR
    - cmake ..
      -DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake
      -DVCPKG_TARGET_TRIPLET=x64-linux-llvm
      -DVCPKG_HOST_TRIPLET=x64-linux-llvm
      -DCMAKE_BUILD_TYPE=Debug
      -DSTAT_BENCH_TESTING:BOOL=ON
      -DSTAT_BENCH_WRITE_JUNIT:BOOL=ON
      -DSTAT_BENCH_ENABLE_CCACHE:BOOL=ON
      "-DCMAKE_CXX_FLAGS=-stdlib=libc++ -fprofile-instr-generate -fcoverage-mapping"
      "-DCMAKE_MODULE_LINKER_FLAGS=-fprofile-instr-generate -fcoverage-mapping"
    - mkdir coverage
    - export LLVM_PROFILE_FILE=$(pwd)/coverage/coverage_%p.profraw
    - cmake --build .
    - ctest -V
    - cd ../
    - scripts/collect_llvm_coverage.sh build_clang_coverage
    - poetry run lcov_cobertura $BUILD_DIR/coverage/coverage --output $BUILD_DIR/coverage.xml
    - bash <(curl -s https://codecov.io/bash) || echo "Codecov did not collect coverage reports"
  coverage: '/[^\s]+%\s+\d+\s+\d+\s+\s[^\s]+%/'
  artifacts:
    paths:
      - $BUILD_DIR/bench
      - $BUILD_DIR/junit
      - $BUILD_DIR/temp_test
      - $BUILD_DIR/coverage
      - "*.png"
      - "*.html"
    reports:
      junit:
        - $BUILD_DIR/junit/*.xml
      coverage_report:
        coverage_format: cobertura
        path: $BUILD_DIR/coverage.xml
    when: always
    expire_in: "1 mos"

clang-asan-ubsan:
  extends: .test linux base
  parallel:
    matrix:
      - COMPILER_TYPE: "clang19"
        IMAGE_PATH: "musicscience37/clang-ci"
        CXX_STANDARD: 14
        TEST_TYPE: "asan_ubsan"
  script:
    - poetry run python ./scripts/ci_linux_test.py
      --compiler_type $COMPILER_TYPE
      --test_type $TEST_TYPE
      --cpp_ver $CXX_STANDARD
      --build_dir $BUILD_DIR

clang-tsan:
  extends: clang-asan-ubsan
  parallel:
    matrix:
      - COMPILER_TYPE: "clang19"
        IMAGE_PATH: "musicscience37/clang-ci"
        CXX_STANDARD: 14
        TEST_TYPE: "tsan"
  script:
    - poetry run python ./scripts/ci_linux_test.py
      --compiler_type $COMPILER_TYPE
      --test_type $TEST_TYPE
      --cpp_ver $CXX_STANDARD
      --build_dir $BUILD_DIR

msvc-release:
  tags:
    - saas-windows-medium-amd64
  stage: test
  needs: []
  dependencies: []
  variables:
    BUILD_DIR: build_msvc
    GIT_SUBMODULE_STRATEGY: recursive
    # workaround in https://github.com/python-poetry/poetry/issues/1917#issuecomment-1235998997
    PYTHON_KEYRING_BACKEND: keyring.backends.null.Keyring
    POETRY_CACHE_DIR: ${CI_PROJECT_DIR}/.poetry-cache
    VCPKG_DEFAULT_BINARY_CACHE: ${CI_PROJECT_DIR}/.vcpkg-cache
    CCACHE_DIR: ${CI_PROJECT_DIR}/.ccache
    CCACHE_COMPILERCHECK: content
    CCACHE_MAXSIZE: 1G
  before_script:
    - New-Item -ItemType Directory -Force -Path $VCPKG_DEFAULT_BINARY_CACHE
    - Import-Module "$env:ChocolateyInstall\helpers\chocolateyProfile.psm1"
    - choco install cmake -y --installargs 'ADD_CMAKE_TO_PATH=System'
    - choco install python312 -y
    - choco install ccache -y
    - RefreshEnv
    - pip install poetry
    - poetry config virtualenvs.in-project true
    - poetry sync --only test
    - .\vcpkg\bootstrap-vcpkg.bat
    - mkdir $BUILD_DIR
  script:
    - cd $BUILD_DIR
    - cmd.exe /C ..\scripts\ci_win.cmd
  cache:
    - key:
        prefix: poetry-${CI_JOB_NAME}
        files:
          - poetry.lock
      paths:
        - .poetry-cache
    - key:
        prefix: vcpkg-${CI_JOB_NAME}
        files:
          - vcpkg-configuration.json
      paths:
        - .vcpkg-cache
    - key: ccache-${CI_JOB_NAME}
      paths:
        - .ccache
  artifacts:
    paths:
      - $BUILD_DIR/bench
      - $BUILD_DIR/junit
      - $BUILD_DIR/temp_test
      - $BUILD_DIR/coverage
      - "*.png"
      - "*.html"
    reports:
      junit:
        - $BUILD_DIR/junit/*.xml
    when: always
    expire_in: "1 mos"

static analysis:
  extends: .test linux base
  parallel:
    matrix:
      - COMPILER_TYPE: "clang19"
        IMAGE_PATH: "musicscience37/clang-ci"
        CXX_STANDARD: 14
        TEST_TYPE: "static_analysis"
  variables:
    BUILD_TYPE: Debug
    BUILD_DIR: build_static_analysis
  script:
    - cd $BUILD_DIR
    - cmake ..
      -DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake
      -DVCPKG_TARGET_TRIPLET=x64-linux-llvm
      -DVCPKG_HOST_TRIPLET=x64-linux-llvm
      -DCMAKE_CXX_FLAGS=-stdlib=libc++
      -DCMAKE_C_FLAGS=-stdlib=libc++
      -DSTAT_BENCH_ENABLE_CLANG_TIDY:BOOL=ON
      -DSTAT_BENCH_TESTING:BOOL=ON
      -DSTAT_BENCH_ENABLE_BENCH=ON
      -DSTAT_BENCH_BUILD_EXAMPLES=ON
      -DSTAT_BENCH_ENABLE_CPP_WARNINGS:BOOL=ON
    - cd ..
    - poetry run clang-tidy-checker -b ${BUILD_DIR} --cache_dir ./.clang-tidy-cache
  cache:
    - key:
        prefix: poetry-${CI_JOB_NAME}
        files:
          - poetry.lock
      paths:
        - .poetry-cache
    - key:
        prefix: vcpkg-${CI_JOB_NAME}
        files:
          - vcpkg-configuration.json
      paths:
        - .vcpkg-cache
    - key: clang-tidy-checker-${CI_JOB_NAME}
      paths:
        - .clang-tidy-cache

python checks:
  stage: test
  needs: []
  image: musicscience37/clang-ci:clang19
  variables:
    POETRY_CACHE_DIR: ${CI_PROJECT_DIR}/.poetry-cache
  script:
    - poetry config virtualenvs.in-project true
    - poetry env use 3.13
    - poetry sync --without doc
    - poetry run pylint ./tests/integ
    - poetry run flake8 ./tests/integ
    - poetry run mypy ./tests/integ
  cache:
    - key:
        prefix: poetry-${CI_JOB_NAME}
        files:
          - poetry.lock
      paths:
        - .poetry-cache
  interruptible: true

doc:
  extends: .test linux base
  parallel:
    matrix:
      - COMPILER_TYPE: "clang19"
        IMAGE_PATH: "musicscience37/sphinx-doxygen"
        TEST_TYPE: "doc"
  variables:
    BUILD_DIR: build_doc
  before_script:
    - poetry config virtualenvs.in-project true
    - poetry env use 3.13
    - poetry sync --only doc
    - mkdir -p $VCPKG_DEFAULT_BINARY_CACHE
    - mkdir $BUILD_DIR
  script:
    - cd $BUILD_DIR
    - cmake ..
      -DCMAKE_TOOLCHAIN_FILE=../vcpkg/scripts/buildsystems/vcpkg.cmake
      -DSTAT_BENCH_BUILD_DOC:BOOL=ON
    - cmake --build . --target stat_bench_doc
  artifacts:
    paths:
      - build_doc/doc
    when: always
    expire_in: "3 mos"

pages:
  stage: deploy
  only:
    - main
  needs:
    - doc
  dependencies:
    - doc
  script:
    - rm -rf public
    - mv build_doc/doc/html public
  artifacts:
    paths:
      - public

release:
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  stage: release
  rules:
    - if: $CI_COMMIT_TAG =~ /^v/
  script:
    - echo "This is a release job."
  release:
    tag_name: $CI_COMMIT_TAG
    name: "$CI_COMMIT_TAG"
    description: "./doc/sphinx/src/change_log/${CI_COMMIT_TAG}.md"
